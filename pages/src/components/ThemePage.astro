---
import { Swell } from "../swell/api";
import { PageError, SwellTheme, ThemeSectionGroup } from "../swell/theme";
import Layout from "@/layouts/Layout.astro";
import ThemeSections from "./ThemeSections.astro";
import EasyblocksPage from "./EasyblocksPage.jsx";
import { getThemeConfig, getEasyblocksPagePropsWithConfigs } from "@/swell/easyblocks";

interface Props {
  id: string;
  title?: string;
  titleKey?: string;
  description?: string;
  descriptionKey?: string;
  content?: string;
  props?: {
    [key: string]: any;
  };
  easyblocks?: boolean;
  getData?: (
    swell: Swell,
    theme: SwellTheme,
  ) => Promise<{ [key: string]: any }>;
}

const {
  id,
  title,
  titleKey,
  description,
  descriptionKey,
  content,
  props,
  getData,
} = Astro.props;

const swell = new Swell({ Astro });
const theme = new SwellTheme(swell);

await theme.init(Astro, id);

const isEditor = typeof Astro.url.searchParams.get("_editor") === 'string';
const swellClientProps = isEditor && swell.getClientProps();

let pageData, pageTitle, pageDescription, pageContent;

try {
  // Rendering page content
  pageData = getData && (await getData(swell, theme));

  [pageTitle, pageDescription, pageContent] = await Promise.all([
    (titleKey && theme.lang(titleKey)) ?? title,
    (descriptionKey && theme.lang(descriptionKey)) ?? description,
    content ?? 
      theme.renderPage(
        {
          ...props,
          ...pageData,
        },
        pageData?.theme_template,
      ),
  ]);

  if (!pageContent && typeof pageContent !== "string") {
    throw new PageError();
  }
} catch (err: any) {
  if (err instanceof PageError) {
    pageTitle = err.title;
    pageContent = await theme.renderPageTemplate(err.template);
  } else {
    pageTitle = "Something went wrong";
    pageContent = await theme.renderPageTemplate("500");
  }
}

const pageProps = { ...props, ...pageData };
const layoutProps = {
  page_title: pageTitle,
  page_description: pageDescription,
  ...props,
};

let sectionConfigs, lang;
if (isEditor && pageContent && typeof pageContent !== 'string') {
  sectionConfigs = await theme.renderSections(
    pageContent as ThemeSectionGroup,
    pageData,
  );
  lang = await getThemeConfig(swell, `config/language-editor`);
}
---

{
  <Layout
    theme={theme}
    {...layoutProps}
  >
    <div slot="content_for_layout">
      {
        typeof pageContent === "string" ? (
          <Fragment set:html={pageContent} />
        ) : isEditor ? (
          <EasyblocksPage
            pageId={theme.pageId}
            pageProps={pageProps}
            layoutProps={layoutProps}
            sectionConfigs={sectionConfigs}
            swellClientProps={swellClientProps}
            lang={lang}
            client:load
          />
        ) : (
          <ThemeSections
            theme={theme}
            content={pageContent}
            data={pageProps}
          />
        )
      }
    </div>
  </Layout>
}