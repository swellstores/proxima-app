---
import get from 'lodash/get';
import { initSwell } from '@/swell';
import {
  Swell,
  PageError,
  PageNotFound,
  SwellTheme,
} from '@swell/storefrontjs';
import storefrontConfig from '../../storefront.json';
import StorefrontShopifyCompatibility from '@/resources/shopify-compatibility';
import Layout from '@/layouts/Layout.astro';
import ThemeSections from './ThemeSections.astro';
import EditorPage from './EditorPage.astro';

const sections = Astro.url.searchParams.get('sections');
const sectionId = Astro.url.searchParams.get('section_id');
const sectionIds = sections
  ? sections.split(',')
  : sectionId
    ? [sectionId]
    : null;

export interface Props {
  id: string;
  title?: string | ((data: SwellData | undefined) => string);
  titleKey?: string;
  titlePath?: string;
  description?: string;
  descriptionKey?: string;
  descriptionPath?: string;
  required?: string;
  requiredPath?: string;
  content?: string;
  props?: {
    [key: string]: any;
  };
  easyblocks?: boolean;
  getData?: (swell: Swell, theme: SwellTheme) => Promise<SwellData> | SwellData;
}

const {
  id,
  title,
  titleKey,
  titlePath,
  description,
  descriptionKey,
  descriptionPath,
  required,
  content,
  props,
  getData,
} = Astro.props;

const swell = Astro.locals.swell || initSwell(Astro);

// Indicate response was sent to avoid mutating cookies
if (Astro.locals.swell) {
  swell.sentResponse = true;
}

const theme =
  Astro.locals.theme ||
  new SwellTheme(swell, {
    storefrontConfig,
    shopifyCompatibilityClass: StorefrontShopifyCompatibility,
  });

if (!theme.pageId) {
  await theme.initGlobals(id);
}

const isEditor = typeof Astro.url.searchParams.get('_editor') === 'string';

let pageData, pageTitle, pageDescription, pageContent;

try {
  // Rendering page content
  pageData = getData && (await getData(swell, theme));

  theme.setCompatibilityData(pageData);

  [pageTitle, pageDescription, pageContent] = await Promise.all([
    titleKey
      ? await theme.lang(titleKey)
      : typeof title === 'string'
        ? await theme.renderTemplateString(title, pageData)
        : typeof title === 'function'
          ? await title(pageData)
          : await get(pageData, titlePath as string),

    descriptionKey
      ? await theme.lang(descriptionKey)
      : typeof description === 'string'
        ? await theme.renderTemplateString(description, pageData)
        : typeof description === 'function'
          ? await description(pageData)
          : await get(pageData, descriptionPath),

    content ?? sectionIds
      ? theme.renderAllSections(sectionIds, {
          ...props,
          ...pageData,
        })
      : theme.renderPage(
          {
            ...props,
            ...pageData,
          },
          pageData?.theme_template
        ),
  ]);

  if (!pageContent && typeof pageContent !== 'string') {
    throw new PageError('Invalid page content');
  }

  if (required) {
    const isFound = await get(pageData, required);
    if (!isFound) {
      throw new PageNotFound();
    }
  }
} catch (err: any) {
  console.log(err);
  try {
    if (err instanceof PageError) {
      pageTitle = err.message;
      pageContent = await theme.renderPageTemplate(err.template);
    } else {
      pageTitle = 'Something went wrong';
      pageContent = await theme.renderPageTemplate('500');
    }
  } catch {
    throw err;
  }
}

const pageProps = { ...props, ...pageData };
const layoutProps = {
  page_title: pageTitle || pageData?.title || theme.globals?.store?.name,
  page_description: pageDescription || pageData?.description,
  content_for_header: theme.getContentForHeader(),
  props,
};
---

{
  sections ? (
    JSON.stringify(pageContent)
  ) : sectionId ? (
    <Fragment set:html={pageContent[sectionId]} />
  ) : isEditor ? (
    <html>
      <EditorPage
        swell={swell}
        theme={theme}
        pageProps={pageProps}
        pageContent={pageContent}
        layoutProps={layoutProps}
      />
    </html>
  ) : (
    <Layout theme={theme} {...layoutProps}>
      <div slot="content_for_layout">
        {typeof pageContent === 'string' ? (
          <Fragment set:html={pageContent} />
        ) : (
          <ThemeSections theme={theme} content={pageContent} data={pageProps} />
        )}
      </div>
    </Layout>
  )
}
